"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayStack = void 0;
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const apigateway = require("aws-cdk-lib/aws-apigateway");
const fs = require("fs");
const path = require("path");
const aws_ecr_assets_1 = require("aws-cdk-lib/aws-ecr-assets");
class ApiGatewayStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const finishedDirPath = this.node.tryGetContext("finishedDirPath");
        if (!finishedDirPath || typeof finishedDirPath !== "string") {
            throw new Error('CDK context variable "finishedDirPath" is required and must be a string.');
        }
        if (!fs.existsSync(finishedDirPath)) {
            console.warn(`❌  Warning: Provided finishedDirPath does not exist: ${finishedDirPath}`);
        }
        const api = new apigateway.RestApi(this, "PredictRestApi", {
            restApiName: "PredictRestApi",
            deployOptions: {
                stageName: "prod",
            },
            defaultMethodOptions: {
                apiKeyRequired: true,
            },
        });
        api.root.addCorsPreflight({
            allowOrigins: apigateway.Cors.ALL_ORIGINS, // Or apigateway.Cors.ALL_ORIGINS
            allowMethods: ["GET", "OPTIONS"], // Methods for the root endpoint
            allowHeaders: ["Content-Type", "Authorization", "x-api-key"], // Common headers
        });
        const modelsPath = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../../nimbus-cli/nimbus-config.json'), 'utf8'));
        const modelsJSON = fs.readFileSync(path.resolve(modelsPath.localStorage, 'finished_dir/models.json'), 'utf8');
        const parsedModels = { models: [] };
        JSON.parse(modelsJSON).forEach((obj) => {
            parsedModels.models.push(obj.modelName);
        });
        const defaultLambda = new lambda.Function(this, "DefaultLambda", {
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            code: lambda.Code.fromInline(`exports.handler = async () => {
          return {
            statusCode: 200,
            headers: { 'Content-Type': 'application/json', "Access-Control-Allow-Origin": "*" },
            body: '${JSON.stringify(parsedModels)}'
          };
        };`),
        });
        api.root.addMethod("GET", new apigateway.LambdaIntegration(defaultLambda), {
            apiKeyRequired: true,
        });
        const modelsConfigPath = path.join(finishedDirPath, "models.json");
        let models = [];
        if (fs.existsSync(modelsConfigPath)) {
            try {
                models = JSON.parse(fs.readFileSync(modelsConfigPath, "utf8"));
            }
            catch (error) {
                console.error(`❌  Error reading or parsing models.json from ${modelsConfigPath}:`, error);
            }
        }
        models.forEach((model) => {
            const modelDirPath = path.join(finishedDirPath, model.modelName);
            if (!fs.existsSync(modelDirPath)) {
                console.warn(`❌  Warning: Model directory does not exist, skipping deployment for ${model.modelName}: ${modelDirPath}`);
                return;
            }
            const modelLambda = new lambda.DockerImageFunction(this, `Lambda_${model.modelName}`, {
                code: lambda.DockerImageCode.fromImageAsset(modelDirPath, {
                    platform: aws_ecr_assets_1.Platform.LINUX_AMD64,
                }),
                memorySize: 3008,
                timeout: cdk.Duration.seconds(60),
            });
            const modelResource = api.root.addResource(model.modelName);
            const predictResource = modelResource.addResource("predict");
            predictResource.addCorsPreflight({
                allowOrigins: apigateway.Cors.ALL_ORIGINS,
                allowMethods: ["POST", "OPTIONS"],
                allowHeaders: ["Content-Type", "Authorization", "x-api-key"],
            });
            predictResource.addMethod("POST", new apigateway.LambdaIntegration(modelLambda), { apiKeyRequired: true });
            new cdk.CfnOutput(this, `ModelEndpoint_${model.modelName}`, {
                value: `${api.url}${model.modelName}/predict`,
            });
        });
        // Create an API Key
        const apiKey = new apigateway.ApiKey(this, "NimbusApiKey", {
            apiKeyName: "nimbus-api-key",
            description: "API Key for Nimbus services and UI",
        });
        // Create a Usage Plan
        const usagePlan = new apigateway.UsagePlan(this, "NimbusUsagePlan", {
            name: "NimbusUsagePlan",
            description: "Usage plan for Nimbus API",
            apiStages: [
                {
                    api: api,
                    stage: api.deploymentStage,
                },
            ],
        });
        // Associate the API Key with the Usage Plan
        usagePlan.addApiKey(apiKey);
        // Output the API Key ID (the actual key value must be retrieved from the console or CLI)
        new cdk.CfnOutput(this, "ApiKeyId", {
            value: apiKey.keyId,
            description: "The ID of the created API Key. Retrieve the value from the AWS Console.",
        });
        new cdk.CfnOutput(this, "RestApiUrl", {
            value: api.url,
        });
    }
}
exports.ApiGatewayStack = ApiGatewayStack;
//# sourceMappingURL=data:application/json;base64,