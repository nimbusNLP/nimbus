{
 "Resources": {
  "PredictRestApiB33CDE4F": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Name": "PredictRestApi"
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/PredictRestApi/Resource"
   }
  },
  "PredictRestApiDeployment49622637487ac22b75165b941ea86eb2d04c0889": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "PredictRestApiB33CDE4F"
    }
   },
   "DependsOn": [
    "PredictRestApiGETBBFCD66A",
    "PredictRestApigrpredictOPTIONS9D34457F",
    "PredictRestApigrpredictPOST826E2DF4",
    "PredictRestApigrpredictBE761574",
    "PredictRestApigrA2EE6957",
    "PredictRestApiOPTIONSE3D1F0DC"
   ],
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/PredictRestApi/Deployment/Resource"
   }
  },
  "PredictRestApiDeploymentStageprod3D359CF9": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "PredictRestApiDeployment49622637487ac22b75165b941ea86eb2d04c0889"
    },
    "RestApiId": {
     "Ref": "PredictRestApiB33CDE4F"
    },
    "StageName": "prod"
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/PredictRestApi/DeploymentStage.prod/Resource"
   }
  },
  "PredictRestApiOPTIONSE3D1F0DC": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,x-api-key'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Fn::GetAtt": [
      "PredictRestApiB33CDE4F",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "PredictRestApiB33CDE4F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/PredictRestApi/Default/OPTIONS/Resource"
   }
  },
  "PredictRestApiGETApiPermissionApiGatewayStackPredictRestApi977BE848GETCE6283CF": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "DefaultLambdaE5505F72",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PredictRestApiB33CDE4F"
       },
       "/",
       {
        "Ref": "PredictRestApiDeploymentStageprod3D359CF9"
       },
       "/GET/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/PredictRestApi/Default/GET/ApiPermission.ApiGatewayStackPredictRestApi977BE848.GET.."
   }
  },
  "PredictRestApiGETApiPermissionTestApiGatewayStackPredictRestApi977BE848GET5BE957A3": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "DefaultLambdaE5505F72",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PredictRestApiB33CDE4F"
       },
       "/test-invoke-stage/GET/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/PredictRestApi/Default/GET/ApiPermission.Test.ApiGatewayStackPredictRestApi977BE848.GET.."
   }
  },
  "PredictRestApiGETBBFCD66A": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": true,
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "DefaultLambdaE5505F72",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Fn::GetAtt": [
      "PredictRestApiB33CDE4F",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "PredictRestApiB33CDE4F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/PredictRestApi/Default/GET/Resource"
   }
  },
  "PredictRestApigrA2EE6957": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "PredictRestApiB33CDE4F",
      "RootResourceId"
     ]
    },
    "PathPart": "gr",
    "RestApiId": {
     "Ref": "PredictRestApiB33CDE4F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/PredictRestApi/Default/gr/Resource"
   }
  },
  "PredictRestApigrpredictBE761574": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "PredictRestApigrA2EE6957"
    },
    "PathPart": "predict",
    "RestApiId": {
     "Ref": "PredictRestApiB33CDE4F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/PredictRestApi/Default/gr/predict/Resource"
   }
  },
  "PredictRestApigrpredictOPTIONS9D34457F": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,x-api-key'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PredictRestApigrpredictBE761574"
    },
    "RestApiId": {
     "Ref": "PredictRestApiB33CDE4F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/PredictRestApi/Default/gr/predict/OPTIONS/Resource"
   }
  },
  "PredictRestApigrpredictPOSTApiPermissionApiGatewayStackPredictRestApi977BE848POSTgrpredict3AEE9627": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "Lambdagr35AC7BD9",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PredictRestApiB33CDE4F"
       },
       "/",
       {
        "Ref": "PredictRestApiDeploymentStageprod3D359CF9"
       },
       "/POST/gr/predict"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/PredictRestApi/Default/gr/predict/POST/ApiPermission.ApiGatewayStackPredictRestApi977BE848.POST..gr.predict"
   }
  },
  "PredictRestApigrpredictPOSTApiPermissionTestApiGatewayStackPredictRestApi977BE848POSTgrpredict0A164886": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "Lambdagr35AC7BD9",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PredictRestApiB33CDE4F"
       },
       "/test-invoke-stage/POST/gr/predict"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/PredictRestApi/Default/gr/predict/POST/ApiPermission.Test.ApiGatewayStackPredictRestApi977BE848.POST..gr.predict"
   }
  },
  "PredictRestApigrpredictPOST826E2DF4": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": true,
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "Lambdagr35AC7BD9",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "PredictRestApigrpredictBE761574"
    },
    "RestApiId": {
     "Ref": "PredictRestApiB33CDE4F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/PredictRestApi/Default/gr/predict/POST/Resource"
   }
  },
  "DefaultLambdaServiceRole602B1F82": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/DefaultLambda/ServiceRole/Resource"
   }
  },
  "DefaultLambdaE5505F72": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "exports.handler = async () => {\n          return {\n            statusCode: 200,\n            headers: { 'Content-Type': 'application/json', \"Access-Control-Allow-Origin\": \"*\" },\n            body: '{\"models\":[\"gr\"]}'\n          };\n        };"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "DefaultLambdaServiceRole602B1F82",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x"
   },
   "DependsOn": [
    "DefaultLambdaServiceRole602B1F82"
   ],
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/DefaultLambda/Resource"
   }
  },
  "LambdagrServiceRoleE5C9EB0A": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/Lambda_gr/ServiceRole/Resource"
   }
  },
  "Lambdagr35AC7BD9": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ImageUri": {
      "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:7e30b33cf0ef55fdcfc6598c39f1d63fb2dc2044984b872dfbf8794ca1e3c595"
     }
    },
    "MemorySize": 3008,
    "PackageType": "Image",
    "Role": {
     "Fn::GetAtt": [
      "LambdagrServiceRoleE5C9EB0A",
      "Arn"
     ]
    },
    "Timeout": 60
   },
   "DependsOn": [
    "LambdagrServiceRoleE5C9EB0A"
   ],
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/Lambda_gr/Resource",
    "aws:asset:path": "asset.7e30b33cf0ef55fdcfc6598c39f1d63fb2dc2044984b872dfbf8794ca1e3c595",
    "aws:asset:dockerfile-path": "Dockerfile",
    "aws:asset:property": "Code.ImageUri"
   }
  },
  "NimbusApiKey710B4DD1": {
   "Type": "AWS::ApiGateway::ApiKey",
   "Properties": {
    "Description": "API Key for Nimbus services and UI",
    "Enabled": true,
    "Name": "nimbus-api-key"
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/NimbusApiKey/Resource"
   }
  },
  "NimbusUsagePlan09D75F55": {
   "Type": "AWS::ApiGateway::UsagePlan",
   "Properties": {
    "ApiStages": [
     {
      "ApiId": {
       "Ref": "PredictRestApiB33CDE4F"
      },
      "Stage": {
       "Ref": "PredictRestApiDeploymentStageprod3D359CF9"
      },
      "Throttle": {}
     }
    ],
    "Description": "Usage plan for Nimbus API",
    "UsagePlanName": "NimbusUsagePlan"
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/NimbusUsagePlan/Resource"
   }
  },
  "NimbusUsagePlanUsagePlanKeyResourceApiGatewayStackNimbusApiKey4958755FDA580EAB": {
   "Type": "AWS::ApiGateway::UsagePlanKey",
   "Properties": {
    "KeyId": {
     "Ref": "NimbusApiKey710B4DD1"
    },
    "KeyType": "API_KEY",
    "UsagePlanId": {
     "Ref": "NimbusUsagePlan09D75F55"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/NimbusUsagePlan/UsagePlanKeyResource:ApiGatewayStackNimbusApiKey4958755F"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/22QQU/DMAyFf8vuqaHbZdfBhIQQYiriPHmp6bw2SRWnTFXV/05CW9iBk5+/Zz/FWUO+zSFf4VUyXdZZwycY3gPqWkV0HLDlCgNdsYehIAm7ltXjp13kntrG9YZsSPSmixEVJTaJOO86r+kBhdQrhbMrkzmrxZ2TJx3jX6hPaFYfEpMODdrE/m/i2KgaNKcSYYjGgbxhEXZWPXVWhyQi/tV7p2vyzyauL2xUjCbe6prpObGOirQ/oggFgZuVXSLJg4JaJxyc79OBY1p860Lbhb/TfobTZ7CtRmVdSXCRu6/1BvIc7lcXYc58ZwMbgmKq38RhkBKcAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "ApiGatewayStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "PredictRestApiEndpointCE56DB59": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "PredictRestApiB33CDE4F"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "PredictRestApiDeploymentStageprod3D359CF9"
      },
      "/"
     ]
    ]
   }
  },
  "ModelEndpointgr": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "PredictRestApiB33CDE4F"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "PredictRestApiDeploymentStageprod3D359CF9"
      },
      "/gr/predict"
     ]
    ]
   }
  },
  "ApiKeyId": {
   "Description": "The ID of the created API Key. Retrieve the value from the AWS Console.",
   "Value": {
    "Ref": "NimbusApiKey710B4DD1"
   }
  },
  "RestApiUrl": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "PredictRestApiB33CDE4F"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "PredictRestApiDeploymentStageprod3D359CF9"
      },
      "/"
     ]
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-3"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-4"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      }
     ]
    },
    {
     "Fn::Equals": [
      {
       "Ref": "AWS::Region"
      },
      "us-west-2"
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}